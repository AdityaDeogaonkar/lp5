                                                     // bubble sort 

#include <bits/stdc++.h>
#include <omp.h>
using namespace std;


void bubble(vector<int>&a, int n)
{
    for (int i = 0; i < n; i++)
    {
        int first = i % 2;

#pragma omp parallel for shared(a, first)
        for (int j = first; j < n - 1; j += 2)
        {
            if (a[j] > a[j + 1])
            {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

void swap(int &a,int &b)
{

    int test;
    test = a;
    a = b;
    b = test;
}

int main()
{

    int n;
    cout << "\n enter total no of elements=>";
    cin >> n;
    vector<int>a(n);
    cout << "\n enter elements=>";
    for (int i = 0; i < n; i++) cin >> a[i];
    bubble(a, n);
    cout << "\n sorted array is=>";
    for (int i = 0; i < n; i++) cout << a[i] << endl;

    return 0;
}

                                                               // mrge sort 

#include <bits/stdc++.h>
#include <omp.h>
using namespace std;
void merge(int *arr, int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int *arr, int l, int r)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;
#pragma omp parallel sections
        {
#pragma omp section
            {
                mergeSort(arr, l, m);
            }
#pragma omp section
            {
                mergeSort(arr, m + 1, r);
            }
        }

        merge(arr, l, m, r);
    }
}

int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
   cout << "Given array is: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
   cout << endl;
    auto start = chrono::high_resolution_clock::now();
#pragma omp parallel
    {
        mergeSort(arr, 0, n - 1);
    }
    auto stop = chrono::high_resolution_clock::now();
    cout<<'\n';
cout<<"parallel_timetaken: "<<chrono::duration_cast<chrono::microseconds>(stop-start).count()<<"ms"<<'\n';
    cout << "Sorted array is: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << std::endl;

//   cout << stop - start;
    return 0;
}
