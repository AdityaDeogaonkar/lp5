#include<bits/stdc++.h>
using namespace std;

class graph{
public:
	int v=6,e=5;
	vector<vector<int>>graph={{1},{0,2,3},{1,4,5},{1,4},{2,3},{2}};
	vector<bool>visited;

	void bfs(int i){
	auto start=chrono::high_resolution_clock::now();
        queue<int> q;
        q.push(i);
        visited[i] = true;
		while(q.empty() != true){
            int current = q.front();
            q.pop();
            cout << current << " ";
            for(auto j = graph[current].begin(); j != graph[current].end();j++){
                if(visited[*j] == false){
                    q.push(*j);
                    visited[*j] = true;
                    }
                }
            }
	auto end=chrono::high_resolution_clock::now();
	cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<'\n';
        }

        void parallel_bfs(int i){
	auto start=chrono::high_resolution_clock::now();
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(q.empty() != true){
                
                    int current = q.front();
                    cout << current << " ";
                    #pragma omp critical
                        q.pop();
                    
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                                q.push(*j);
                                visited[*j] = true;
                        }
                    }
            }
	auto end=chrono::high_resolution_clock::now();
	cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<'\n';
        }


        void dfs(int i){
	auto start=chrono::high_resolution_clock::now();
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                s.pop();
                for(auto j = graph[current].begin(); j != graph[current].end();j++){
                    if(visited[*j] == false){
                        s.push(*j);
                        visited[*j] = true;
                    }
                }  
            }
	auto end=chrono::high_resolution_clock::now();
	cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<'\n';
        }

        void parallel_dfs(int i){
	auto start=chrono::high_resolution_clock::now();
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                #pragma omp critical
                    s.pop();
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                            {
                                s.push(*j);
                                visited[*j] = true;
                            }
                        }
                    }
            	}
			auto end=chrono::high_resolution_clock::now();
	cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<'\n';
       }

        void initialize_visited(){
            visited.assign(v,false);
        }
    };



int main() {
		#ifndef ONLINE_JUDGE 
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	graph g;
	g.initialize_visited();
	g.bfs(0);
	g.parallel_bfs(0);
	g.dfs(0);
	g.parallel_dfs(0);

}
