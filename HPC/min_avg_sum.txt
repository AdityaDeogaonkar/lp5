#include<bits/stdc++.h>
#include <omp.h>
using namespace std;
void min_reduction(vector<int>arr, int n)
{
    auto start=chrono::high_resolution_clock::now();
    int min_value = INT_MAX;
#pragma omp parallel for reduction(min \: min_value)
    for (int i = 0; i < n; i++)
    {
        if (arr[i] < min_value)
        {
            min_value = arr[i];
        }
    }
    cout << "Minimum value: " << min_value << endl;
    auto end=chrono::high_resolution_clock::now();
    cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<endl;
}

void max_reduction(vector<int>arr, int n)
{
    auto start=chrono::high_resolution_clock::now();
    int max_value = INT_MIN;
#pragma omp parallel for reduction(max \: max_value)
    for (int i = 0; i < n; i++)
    {
        if (arr[i] > max_value)
        {
            max_value = arr[i];
        }
    }
    cout << "Maximum value: " << max_value << endl;
        auto end=chrono::high_resolution_clock::now();
    cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<endl;
}

void sum_reduction(vector<int>arr, int n)
{
    auto start=chrono::high_resolution_clock::now();
    int sum = 0;
#pragma omp parallel for reduction(+ \: sum)
    for (int i = 0; i < n; i++)
    {
        sum += arr[i];
    }
    cout << "Sum: " << sum << endl;
        auto end=chrono::high_resolution_clock::now();
    cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<endl;
}

void average_reduction(vector<int>arr, int n)
{
    auto start=chrono::high_resolution_clock::now();
    int sum = 0;
#pragma omp parallel for reduction(+ \: sum)
    for (int i = 0; i < n; i++)
    {
        sum += arr[i];
    }
    cout << "Average: " << (double)sum / (n) << endl;
        auto end=chrono::high_resolution_clock::now();
    cout<<"time taken :: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms"<<endl;
}

int main()
{
    int n;
    cout << "\n enter total no of elements=>";
    cin >> n;
    vector<int>arr(n);
    auto start=0,end=0;
    cout << "\n enter elements=>";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    //   int arr[] = {5, 2, 9, 1, 7, 6, 8, 3, 4};
    //   int n = size(arr);
    min_reduction(arr, n);
    max_reduction(arr, n);
    sum_reduction(arr, n);
    average_reduction(arr, n);
}